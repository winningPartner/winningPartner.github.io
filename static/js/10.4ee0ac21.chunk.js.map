{"version":3,"sources":["components/Title/Title.jsx","pages/Daily/Daily.jsx"],"names":["Title","title","classes","className","defaultProps","columns","name","selector","sortable","Daily","useState","daily","variables","setVariables","loading","setLoading","totalRows","setTotalRows","token","useSelector","store","auth","currentUser","fetchDailyVariables","useCallback","page","params","fetchAPI","fetchDataFromServer","type","then","data","reports","total_count","setTimeout","catch","error","useEffect","progressPending","pagination","paginationServer","paginationPerPage","paginationTotalRows","onChangePage","progressComponent"],"mappings":"6FAAA,oBAGMA,EAAQ,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACtB,OAAO,wBAAIC,UAAWD,GAAUD,IAQlCD,EAAMI,aAAe,CACnBH,MAAO,eACPC,QAAS,eAGIF,O,wICRTK,G,MAAU,CACd,CACEC,KAAM,OACNC,SAAU,OACVC,UAAU,GAEZ,CACEF,KAAM,aACNC,SAAU,aACVC,UAAU,GAEZ,CACEF,KAAM,WACNC,SAAU,WACVC,UAAU,GAEZ,CACEF,KAAM,WACNC,SAAU,WACVC,UAAU,GAEZ,CACEF,KAAM,SACNC,SAAU,SACVC,UAAU,GAEZ,CACEF,KAAM,OACNC,SAAU,OACVC,UAAU,GAEZ,CACEF,KAAM,gBACNC,SAAU,gBACVC,UAAU,GAEZ,CACEF,KAAM,iBACNC,SAAU,iBACVC,UAAU,KAyECC,UArED,WAAO,IAAD,EACgBC,mBAAS,CACzCC,MAAO,KAFS,mBACXC,EADW,KACAC,EADA,OAIYH,oBAAS,GAJrB,mBAIXI,EAJW,KAIFC,EAJE,OAKgBL,mBAAS,GALzB,mBAKXM,EALW,KAKAC,EALA,KAMZC,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMC,KAAKC,YAAYJ,SAEtDK,EAAsBC,uBAC1B,SAACC,GACCV,GAAW,GACX,IAAMW,EAAS,CACbR,MAAOA,EACPO,KAAMA,GAERE,IACGC,oBADH,aAEIC,KAAM,SACHH,IAEJI,MAAK,YAAyC,IAAD,IAArCC,KAAQC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,YACxBpB,EAAa,CACXF,MAAOqB,IAETf,EAAagB,GACbC,YAAW,WACTnB,GAAW,KACV,QAEJoB,OAAM,WACLtB,EAAa,CACXF,MAAO,CACLyB,OAAO,UAKjB,CAAClB,IAWH,OAJAmB,qBAAU,WACRd,EAAoB,KACnB,CAACA,IAGF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOtB,MAAM,YACb,yBAAKE,UAAU,iBACb,kBAAC,IAAD,CACEF,MAAM,QACNI,QAASA,EACT0B,KAAMnB,EAAUD,MAChB2B,gBAAiBxB,EACjByB,YAAU,EACVC,kBAAgB,EAChBC,kBAAmB,GACnBC,oBAAqB1B,EACrB2B,aArBiB,SAAClB,GACxBF,EAAoBE,IAqBdmB,kBAAmB,kBAAC,IAAD","file":"static/js/10.4ee0ac21.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Title = ({ title, classes }) => {\r\n  return <h1 className={classes}>{title}</h1>;\r\n};\r\n\r\nTitle.propTypes = {\r\n  title: PropTypes.string,\r\n  classes: PropTypes.string,\r\n};\r\n\r\nTitle.defaultProps = {\r\n  title: \"Simple title\",\r\n  classes: \"page__title\",\r\n};\r\n\r\nexport default Title;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport Title from \"../../components/Title/Title\";\r\nimport { useSelector } from \"react-redux\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport { Circular } from \"../../components/Circular/Circular\";\r\nimport { fetchAPI } from \"../../api\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst columns = [\r\n  {\r\n    name: \"Date\",\r\n    selector: \"date\",\r\n    sortable: true,\r\n  },\r\n  {\r\n    name: \"Commission\",\r\n    selector: \"commission\",\r\n    sortable: true,\r\n  },\r\n  {\r\n    name: \"Net Cash\",\r\n    selector: \"net_cash\",\r\n    sortable: true,\r\n  },\r\n  {\r\n    name: \"Deposits\",\r\n    selector: \"deposits\",\r\n    sortable: true,\r\n  },\r\n  {\r\n    name: \"Clicks\",\r\n    selector: \"clicks\",\r\n    sortable: true,\r\n  },\r\n  {\r\n    name: \"FTDS\",\r\n    selector: \"ftds\",\r\n    sortable: true,\r\n  },\r\n  {\r\n    name: \"Registrations\",\r\n    selector: \"registrations\",\r\n    sortable: true,\r\n  },\r\n  {\r\n    name: \"No of deposits\",\r\n    selector: \"no_of_deposits\",\r\n    sortable: true,\r\n  },\r\n];\r\n\r\nconst Daily = () => {\r\n  const [variables, setVariables] = useState({\r\n    daily: [],\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [totalRows, setTotalRows] = useState(0);\r\n  const token = useSelector((store) => store.auth.currentUser.token);\r\n\r\n  const fetchDailyVariables = useCallback(\r\n    (page) => {\r\n      setLoading(true);\r\n      const params = {\r\n        token: token,\r\n        page: page,\r\n      };\r\n      fetchAPI\r\n        .fetchDataFromServer({\r\n          type: \"daily\",\r\n          ...params,\r\n        })\r\n        .then(({ data: { reports, total_count } }) => {\r\n          setVariables({\r\n            daily: reports,\r\n          });\r\n          setTotalRows(total_count);\r\n          setTimeout(() => {\r\n            setLoading(false);\r\n          }, 1000);\r\n        })\r\n        .catch(() => {\r\n          setVariables({\r\n            daily: {\r\n              error: true,\r\n            },\r\n          });\r\n        });\r\n    },\r\n    [token]\r\n  );\r\n\r\n  const handleChangePage = (page) => {\r\n    fetchDailyVariables(page);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDailyVariables(1);\r\n  }, [fetchDailyVariables]);\r\n\r\n  return (\r\n    <Row>\r\n      <Title title=\"Reports\" />\r\n      <div className=\"data__wrapper\">\r\n        <DataTable\r\n          title=\"Daily\"\r\n          columns={columns}\r\n          data={variables.daily}\r\n          progressPending={loading}\r\n          pagination\r\n          paginationServer\r\n          paginationPerPage={20}\r\n          paginationTotalRows={totalRows}\r\n          onChangePage={handleChangePage}\r\n          progressComponent={<Circular />}\r\n        />\r\n      </div>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Daily;\r\n"],"sourceRoot":""}